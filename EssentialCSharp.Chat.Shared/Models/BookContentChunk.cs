using Microsoft.Extensions.VectorData;

namespace EssentialCSharp.Chat.Common.Models;

/// <summary>
/// Represents a chunk of markdown content for vector search
/// Following Semantic Kernel Vector Store best practices from Microsoft docs
/// </summary>
public class BookContentChunk
{
    /// <summary>
    /// Unique identifier for the chunk - serves as the vector store key
    /// </summary>
    [VectorStoreKey]
    public string Id { get; set; } = string.Empty;

    /// <summary>
    /// Original source file name
    /// </summary>
    [VectorStoreData]
    public string FileName { get; set; } = string.Empty;

    /// <summary>
    /// Heading or title of the markdown chunk
    /// </summary>
    [VectorStoreData]
    public string Heading { get; set; } = string.Empty;

    /// <summary>
    /// The actual markdown content text for this chunk
    /// </summary>
    [VectorStoreData]
    public string ChunkText { get; set; } = string.Empty;

    /// <summary>
    /// Chapter number extracted from filename (e.g., "Chapter01.md" -> 1)
    /// </summary>
    [VectorStoreData]
    public int? ChapterNumber { get; set; }

    /// <summary>
    /// SHA256 hash of the chunk content for change detection
    /// </summary>
    [VectorStoreData]
    public string ContentHash { get; set; } = string.Empty;

    /// <summary>
    /// Vector embedding for the chunk text - will be generated by embedding service
    /// Using 1536 dimensions for Azure OpenAI text-embedding-ada-002
    /// </summary>
    [VectorStoreVector(Dimensions: 1536, DistanceFunction = DistanceFunction.CosineSimilarity, IndexKind = IndexKind.Hnsw)]
    public ReadOnlyMemory<float>? TextEmbedding { get; set; }
}
