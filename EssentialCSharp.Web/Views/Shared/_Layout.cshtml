@using EssentialCSharp.Web.Extensions
@using System.Globalization
@using EssentialCSharp.Web.Services
@using IntelliTect.Multitool
@using EssentialCSharp.Common
@inject ISiteMappingService _SiteMappings
@using Microsoft.AspNetCore.Components
@{
    var prodMap = new ImportMapDefinition(
        new Dictionary<string, string>
                        {
            { "vue", "./lib/vue/dist/vue.esm-browser.prod.js" },
            { "vue-window-size", "./lib/vue-window-size/composition-api/dist/index.js" },
                        }, null, null);
    var devMap = new ImportMapDefinition(
    new Dictionary<string, string>
                    {
            { "vue", "./lib/vue/dist/vue.esm-browser.js" },
            { "vue-window-size", "./lib/vue-window-size/composition-api/dist/index.js" },
                    }, null, null);
}
<!DOCTYPE html>
<html lang="en">
<head>
    @{
        const string imageUrl = "https://essentialcsharp.com/images/icon.png";
        const string description = "Accelerate your development knowledge with C# expert Mark Michaelis' free, online comprehensive C# tutorial and reference that is updated through C# 11.0";
        string title = $"Essential C#{(string.IsNullOrEmpty(ViewBag.PageTitle) ? string.Empty : $": {ViewBag.PageTitle}")}";
    }
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://essentialcsharp.com/" />
    <meta property="og:image:secure_url" content="@imageUrl" />
    <meta property="og:image" content="@imageUrl" />
    <meta name="twitter:image" content="@imageUrl" />
    <title id="page-title">@title</title>
    <meta property="og:image:type" content="image/png" />
    <meta name="description" property="og:description" content="@description" />
    <meta name="twitter:description" content="@description" />
    <meta name="twitter:card" content="summary" />
    <meta name="twitter:site" content="@@IntelliTect" />
    <meta property="og:image:width" content="500" />
    <meta property="og:image:height" content="500" />
    <meta name="twitter:title" property="og:title" content="@title" />
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="/lib/docsearch/style.css" />
    @*Font Family*@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:ital,wght@0,400;0,500;0,700;0,900;1,400;1,500;1,700;1,900&display=auto" rel="stylesheet">
    @*End Font Family*@
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">
    <link rel="mask-icon" href="/safari-pinned-tab.svg" color="#5bbad5">
    <meta name="msapplication-TileColor" content="#da532c">
    <meta name="theme-color" content="#ffffff">
    @*So that Safari can import modules*@
    <script async src="/lib/es-module-shims/dist/es-module-shims.js"></script>
    <environment include="Development">
        <script type="importmap" asp-importmap="@devMap"></script>
    </environment>
    <environment exclude="Development">
        <script type="importmap" asp-importmap="@prodMap"></script>
    </environment>
    <script type="text/javascript">
        (function (c, l, a, r, i, t, y) {
            c[a] = c[a] || function () { (c[a].q = c[a].q || []).push(arguments) };
            t = l.createElement(r); t.async = 1; t.src = "https://www.clarity.ms/tag/" + i;
            y = l.getElementsByTagName(r)[0]; y.parentNode.insertBefore(t, y);
        })(window, document, "clarity", "script", "g4keetzd2o");
    </script>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.2.0/css/all.min.css">
    <!-- Markdown and sanitization libraries -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.5/dist/purify.min.js"></script>
    <!-- Google tag (gtag.js) -->
    <script async src="https://www.googletagmanager.com/gtag/js?id=G-761B4BMK2R"></script>
    <script>
        window.dataLayer = window.dataLayer || [];
        function gtag() { dataLayer.push(arguments); }
        gtag('js', new Date());
        gtag('config', 'G-761B4BMK2R');
    </script>
    <style>
        [v-cloak] {
            display: none;
        }
        
        /* Chat Widget Styles */
        .chat-widget {
            position: fixed;
            bottom: 20px;
            right: 20px;
            z-index: 1050;
            font-family: 'Roboto', sans-serif;
        }
        
        .chat-toggle {
            width: 60px;
            height: 60px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            transition: all 0.3s ease;
            color: white;
            font-size: 24px;
            animation: chatPulse 3s infinite;
        }
        
        .chat-toggle:hover {
            transform: scale(1.05);
            box-shadow: 0 6px 20px rgba(0, 0, 0, 0.2);
            animation: none;
        }
        
        @@keyframes chatPulse {
            0%, 100% {
                box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            }
            50% {
                box-shadow: 0 4px 12px rgba(102, 126, 234, 0.4), 0 0 0 10px rgba(102, 126, 234, 0.1);
            }
        }
        
        .chat-panel {
            position: absolute;
            bottom: 80px;
            right: 0;
            width: 380px;
            height: 500px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
            border: 1px solid #e1e5e9;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .chat-panel-header {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 16px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .chat-panel-title {
            font-weight: 600;
            font-size: 16px;
            display: flex;
            align-items: center;
        }
        
        .chat-panel-controls {
            display: flex;
            gap: 8px;
        }
        
        .chat-btn {
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            padding: 4px 8px;
            border-radius: 4px;
            transition: background-color 0.2s;
        }
        
        .chat-btn:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .chat-panel-body {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .chat-widget-messages {
            flex: 1;
            overflow-y: auto;
            padding: 16px;
            background: #f8f9fa;
        }
        
        .chat-widget-input {
            padding: 12px 16px;
            background: white;
            border-top: 1px solid #e1e5e9;
        }
        
        .chat-widget-options {
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .chat-message {
            margin-bottom: 12px;
            max-width: 85%;
        }
        
        .chat-message.user {
            margin-left: auto;
        }
        
        .chat-message.user .message-content {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 8px 12px;
            border-radius: 18px 18px 4px 18px;
            word-wrap: break-word;
        }
        
        /* Chat message formatting styles */
        .chat-message.assistant .message-content {
            background: white;
            color: #333;
            padding: 8px 12px;
            border-radius: 18px 18px 18px 4px;
            border: 1px solid #e1e5e9;
            word-wrap: break-word;
            line-height: 1.4;
        }
        
        .chat-message.assistant .message-content h1,
        .chat-message.assistant .message-content h2,
        .chat-message.assistant .message-content h3,
        .chat-message.assistant .message-content h4,
        .chat-message.assistant .message-content h5,
        .chat-message.assistant .message-content h6 {
            margin: 8px 0 4px 0;
            font-weight: 600;
            color: #2d3748;
        }
        
        .chat-message.assistant .message-content h1 { font-size: 1.1em; }
        .chat-message.assistant .message-content h2 { font-size: 1.05em; }
        .chat-message.assistant .message-content h3 { font-size: 1em; }
        .chat-message.assistant .message-content h4 { font-size: 0.95em; }
        .chat-message.assistant .message-content h5 { font-size: 0.9em; }
        .chat-message.assistant .message-content h6 { font-size: 0.85em; }
        
        .chat-message.assistant .message-content p {
            margin: 4px 0;
        }
        
        .chat-message.assistant .message-content ul,
        .chat-message.assistant .message-content ol {
            margin: 4px 0;
            padding-left: 20px;
        }
        
        .chat-message.assistant .message-content li {
            margin: 2px 0;
        }
        
        .chat-message.assistant .message-content pre {
            background: #f6f8fa;
            border: 1px solid #d1d9e0;
            border-radius: 6px;
            padding: 8px;
            margin: 4px 0;
            font-family: 'Courier New', Consolas, monospace;
            font-size: 0.85em;
            overflow-x: auto;
            white-space: pre-wrap;
        }
        
        .chat-message.assistant .message-content code {
            background: #f6f8fa;
            border: 1px solid #d1d9e0;
            border-radius: 3px;
            padding: 2px 4px;
            font-family: 'Courier New', Consolas, monospace;
            font-size: 0.9em;
        }
        
        .chat-message.assistant .message-content pre code {
            background: none;
            border: none;
            padding: 0;
        }
        
        .chat-message.assistant .message-content blockquote {
            border-left: 4px solid #667eea;
            margin: 4px 0;
            padding-left: 8px;
            font-style: italic;
            color: #6c757d;
        }
        
        .chat-message.assistant .message-content strong {
            font-weight: 600;
        }
        
        .chat-message.assistant .message-content em {
            font-style: italic;
        }
        
        .chat-message.assistant .message-content a {
            color: #667eea;
            text-decoration: none;
        }
        
        .chat-message.assistant .message-content a:hover {
            text-decoration: underline;
        }
        
        .chat-message.assistant .message-content table {
            border-collapse: collapse;
            width: 100%;
            margin: 4px 0;
            font-size: 0.9em;
        }
        
        .chat-message.assistant .message-content th,
        .chat-message.assistant .message-content td {
            border: 1px solid #d1d9e0;
            padding: 4px 8px;
            text-align: left;
        }
        
        .chat-message.assistant .message-content th {
            background: #f6f8fa;
            font-weight: 600;
        }
        
        .chat-message.error .message-content {
            background: #fff5f5;
            color: #e53e3e;
            padding: 8px 12px;
            border-radius: 18px 18px 18px 4px;
            border: 1px solid #fed7d7;
            word-wrap: break-word;
        }

        
        .chat-typing-indicator {
            display: none;
            margin-bottom: 12px;
            max-width: 85%;
        }
        
        .chat-typing-indicator .message-content {
            background: white;
            border: 1px solid #e1e5e9;
            padding: 8px 12px;
            border-radius: 18px 18px 18px 4px;
            display: flex;
            align-items: center;
            gap: 8px;
        }
        
        .chat-typing-dots {
            display: flex;
            gap: 4px;
        }
        
        .chat-typing-dots span {
            width: 6px;
            height: 6px;
            background-color: #6c757d;
            border-radius: 50%;
            animation: chatTyping 1.4s infinite;
        }
        
        .chat-typing-dots span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .chat-typing-dots span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        @@keyframes chatTyping {
            0%, 60%, 100% {
                transform: translateY(0);
                opacity: 0.5;
            }
            30% {
                transform: translateY(-8px);
                opacity: 1;
            }
        }
        
        /* Mobile responsiveness */
        @@media (max-width: 768px) {
            .chat-panel {
                width: calc(100vw - 40px);
                height: 400px;
                bottom: 80px;
                right: 20px;
                left: 20px;
            }
            
            .chat-toggle {
                right: 20px;
            }
        }
    </style>
    @await RenderSectionAsync("HeadAppend", required: false)
</head>
<body>
    <div id="app" class="vh-100">
        <div>
            <header class="header-background">
                <div class="banner d-flex justify-content-between">
                    <div class="d-flex align-items-center menu-position">
                        <button class="menu-btn has-tooltip" v-on:click="toggleSidebar">
                            <i class="fa fa-bars fa-lg icon-light"></i>
                            <span class="tooltip-text sidebar-tooltip-text">
                                <b>Ctrl + M</b>
                            </span>
                        </button>
                        <div class="d-none d-lg-block">
                            <ul class="nav align-items-center">
                                <li class="nav-item d-none d-md-block">
                                    <a class="@(string.IsNullOrEmpty(ViewBag.PageTitle) ? "active nav-link fs-4" : "nav-link fs-4")" href="/home">
                                        Essential C#
                                    </a>
                                </li>
                                <li class="nav-item">
                                    <a class="@(ViewBag.PageTitle == "About" ? "active nav-link" : "nav-link")" href="/about">About</a>
                                </li>
                                <li class="nav-item">
                                    <a class="@(ViewBag.PageTitle == "Coding Guidelines" ? "active nav-link" : "nav-link")" href="/guidelines">Guidelines</a>
                                </li>
                                <li class="nav-item">
                                    <a class="@(ViewBag.PageTitle == "Announcements" ? "active nav-link" : "nav-link")" href="/announcements">Announcements</a>
                                </li>
                            </ul>
                        </div>
                    </div>

                    <a v-if="chapterParentPage" :href="chapterParentPage.href" class="page-menu menu-chapter-title text-light">
                        <span v-cloak>{{chapterParentPage.title}}</span>
                    </a>
                    <div class="page-menu menu-progress text-light" v-if="isContentPage">
                        <span v-cloak>{{percentComplete}}%</span>
                    </div>

                    <div class="d-flex align-items-center">
                        <div class="border-end pe-3 d-none d-md-block">
                            <a class="btn btn-primary btn-sm rounded-pill"
                               target="blank"
                               href="https://github.com/IntelliTect/EssentialCSharp.Web/discussions/new?category=feedback-and-ideas">
                                <span class="fa fa-solid fa-comment fa-lg text-light me-1"></span>
                                Feedback
                            </a>
                        </div>
                        <a class="d-md-none"
                           target="blank"
                           href="https://github.com/IntelliTect/EssentialCSharp.Web/discussions/new?category=feedback-and-ideas">
                            <span class="fa fa-solid fa-comment icon-light fa-lg"></span>
                        </a>
                        <partial name="_LoginPartial" />
                    </div>
                </div>
            </header>

            <main :class="{ layout: true, 'has-sidebar': sidebarShown && !smallScreen }">
                <div id="sidebarContainer" class="background-grey-lighten-2">
                    <Transition name="slide-fade">
                        <div v-cloak v-if="sidebarShown" :class="{sidebarSmall: smallScreen}" class="sidebar toc-padding" id="sidebar">
                            <div v-cloak class="toc-menu">
                                <div style="display:grid; width:100%; margin-bottom:.75rem;">
                                    <button v-on:click="openSearch" type="button" class="DocSearch DocSearch-Button DocSearch-Style" aria-label="Search">
                                        <span class="DocSearch-Button-Container">
                                            <svg width="20" height="20" class="DocSearch-Search-Icon" viewBox="0 0 20 20">
                                                <path d="M14.386 14.386l4.0877 4.0877-4.0877-4.0877c-2.9418 2.9419-7.7115 2.9419-10.6533 0-2.9419-2.9418-2.9419-7.7115 0-10.6533 2.9418-2.9419 7.7115-2.9419 10.6533 0 2.9419 2.9418 2.9419 7.7115 0 10.6533z" stroke="currentColor" fill="none" fill-rule="evenodd" stroke-linecap="round" stroke-linejoin="round"></path>
                                            </svg>
                                            <span class="DocSearch-Button-Placeholder">Search</span>
                                        </span>
                                        <span class="DocSearch-Button-Keys">
                                            <kbd class="DocSearch-Button-Key">
                                                <svg width="15" height="15" class="DocSearch-Control-Key-Icon">
                                                    <path d="M4.505 4.496h2M5.505 5.496v5M8.216 4.496l.055 5.993M10 7.5c.333.333.5.667.5 1v2M12.326 4.5v5.996M8.384 4.496c1.674 0 2.116 0 2.116 1.5s-.442 1.5-2.116 1.5M3.205 9.303c-.09.448-.277 1.21-1.241 1.203C1 10.5.5 9.513.5 8V7c0-1.57.5-2.5 1.464-2.494.964.006 1.134.598 1.24 1.342M12.553 10.5h1.953" stroke-width="1.2" stroke="currentColor" fill="none" stroke-linecap="square"></path>
                                                </svg>
                                            </kbd>
                                            <kbd class="DocSearch-Button-Key">K</kbd>
                                        </span>
                                    </button>
                                </div>
                                <div class="list-group list-group-flush d-md-none mb-3">
                                    <a href="home" class="@(string.IsNullOrEmpty(ViewBag.PageTitle) ? "active list-group-item list-group-item-action" : "list-group-item list-group-item-action")">
                                        <span class="fas fa-home me-2"></span>
                                        <span class="fs-5">Home</span>
                                    </a>
                                    <a href="/About" class="@(ViewBag.PageTitle == "About" ? "active list-group-item list-group-item-action" : "list-group-item list-group-item-action")">
                                        <span class="fas fa-book me-2"></span>
                                        <span class="fs-5">About</span>
                                    </a>
                                    <a href="/Guidelines" class="@(ViewBag.PageTitle == "Coding Guidelines" ? "active list-group-item list-group-item-action" : "list-group-item list-group-item-action")">
                                        <span class="fas fa-code me-2"></span>
                                        <span class="fs-5">Guidelines</span>
                                    </a>
                                    <a href="/Announcements" class="@(ViewBag.PageTitle == "Announcements" ? "active list-group-item list-group-item-action" : "list-group-item list-group-item-action")">
                                        <span class="fas fa-bullhorn me-2"></span>
                                        <span class="fs-5">Announcements</span>
                                    </a>
                                </div>
                                <div style="display: flex; align-items: center;">
                                    <h5 style="margin-right: 8px;">
                                        Contents
                                    </h5>
                                    <i class="fa-solid fa-filter" v-on:click="enableTocFilter = enableTocFilter === 'filter' ? 'none' : 'filter';"></i>
                                </div>
                                <div v-if="enableTocFilter === 'filter'" class="filter-input-container">
                                    <input type="text" class="filter-input" v-model="searchQuery" placeholder="Search sections..." />
                                    <button class="filter-btn">
                                        <i class="fa fa-search icon-light"></i>
                                    </button>
                                </div>
                            </div>

                            <div v-cloak v-if="sidebarTab == 'toc'" class="toc-tree" id="toc">
                                <ul class="tree">
                                    <toc-tree v-for="item in filteredTocData" :item="item" :expanded-tocs="expandedTocs" :current-page="currentPage"></toc-tree>
                                </ul>
                            </div>
                            <div v-cloak>
                                <small>
                                    Build: @if (ReleaseDateAttribute.GetReleaseDate() is DateTime date)
                                    {
                                        <b>@TimeZoneInfo.ConvertTimeFromUtc(date, TimeZoneInfo.FindSystemTimeZoneById("Pacific Standard Time")).ToString("d MMM, yyyy h:mm:ss tt", CultureInfo.InvariantCulture)</b>
                                    }
                                </small>
                            </div>
                        </div>
                    </Transition>
                </div>
                <div class="container my-5 pb-5">

                    <nav v-cloak class="turn-page">
                        <div class="turn-page-tooltip">
                            <a id="prev-btn" :href="previousPageUrl" v-if="previousPageUrl" class="arrow-btn"><i class="fa fa-solid fa-arrow-left icon-light arrow-icon"></i></a>
                            <span class="turn-page-tooltip-text tooltip-right">
                                <b>Previous Page</b>
                                <br />
                                ( or use the <i class="fa-solid fa-square-caret-left"></i> key)
                            </span>
                        </div>
                        <div class="turn-page-tooltip">
                            <a id="next-btn" :href="nextPageUrl" v-if="nextPageUrl" class="arrow-btn"><i class="fa fa-solid fa-arrow-right icon-light arrow-icon"></i></a>
                            <span class="turn-page-tooltip-text tooltip-left">
                                <b>Next Page</b>
                                <br />
                                ( or use the <i class="fa-solid fa-square-caret-right"></i> key)
                            </span>
                        </div>
                    </nav>

                    @RenderBody()

                </div>
            </main>

            <div v-cloak v-if="snackbarMessage" id="snackbar" class="show" :style="{ color: snackbarColor }">
                {{ snackbarMessage }}
            </div>

            <!-- AI Chat Widget -->
            <div id="chatWidget" class="chat-widget">
                <div id="chatToggle" class="chat-toggle" title="Chat with AI Assistant">
                    <i class="fas fa-robot"></i>
                </div>
                
                <div id="chatPanel" class="chat-panel" style="display: none;">
                    <div class="chat-panel-header">
                        <div class="chat-panel-title">
                            <i class="fas fa-robot me-2"></i>
                            AI Chat Assistant
                        </div>
                        <div class="chat-panel-controls">
                            <button id="chatMinimize" class="chat-btn" title="Minimize">
                                <i class="fas fa-minus"></i>
                            </button>
                            <button id="chatClose" class="chat-btn" title="Close">
                                <i class="fas fa-times"></i>
                            </button>
                        </div>
                    </div>
                    
                    <div class="chat-panel-body">
                        <div id="chatWidgetMessages" class="chat-widget-messages">
                            <div class="chat-message assistant">
                                <div class="message-content">
                                    <strong>👋 Hello!</strong> I'm your AI assistant with access to Essential C# book content. How can I help you today?
                                </div>
                            </div>
                        </div>
                        
                        <div class="chat-widget-input">
                            <div class="input-group input-group-sm">
                                <input type="text" id="chatWidgetInput" class="form-control" placeholder="Ask me about C#..." disabled>
                                <button id="chatWidgetSend" class="btn btn-primary btn-sm" disabled>
                                    <i class="fas fa-paper-plane"></i>
                                </button>
                            </div>
                            
                            <div class="chat-widget-options mt-1">
                                <button id="chatWidgetClear" class="btn btn-link btn-sm p-0 ms-2" title="Clear chat">
                                    <i class="fas fa-trash"></i>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

        </div>
        <footer class="border-top footer">
            <div class="row">
                <div class="col-12 col-md-4 me-auto p-2">
                    &copy; IntelliTect 2005-@DateTime.Now.Year
                </div>
                <div class="col-12 col-md-auto align-self-end p-2">
                    <a target="_blank" rel="noreferrer noopener" href="https://intellitect.com/about/privacy-policy/">Privacy</a>
                </div>
                <div class="col-12 col-md-auto align-self-end p-2"><a asp-route="TermsOfService">Terms Of Service</a></div>
            </div>
        </footer>
    </div>

    <div id="docsearch" style="display: none;"></div>

    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/algoliaDocSearch.js" asp-append-version="true"></script>
    <script src="~/js/chat-widget.js" asp-append-version="true"></script>

    @await RenderSectionAsync("Scripts", required: false)
    <script>
        @{
            var tocData = _SiteMappings.GetTocData();
            var percentComplete = _SiteMappings.SiteMappings.FindPercentComplete((string) ViewBag.CurrentPageKey);
        }
            PERCENT_COMPLETE = @Json.Serialize(percentComplete);
            PREVIOUS_PAGE = @Json.Serialize(ViewBag.PreviousPage)
            NEXT_PAGE = @Json.Serialize(ViewBag.NextPage)
            TOC_DATA = @Json.Serialize(tocData)
            REFERRAL_ID = @Json.Serialize(ViewBag.ReferralId)
    </script>

    @* Recursive vue component template for rendering the table of contents. *@
    <template id="toc-tree">
        <li v-if="item.items.length">
            <details :open="expandedTocs.has(item.key)"
                     v-on:toggle="!$event.target.open ? expandedTocs.delete(item.key) : expandedTocs.add(item.key)">
                <summary :class="{
                         'toc-content' : item.level==0,
                         'nested' : item.level>
                    0,
                    'current-section': currentPage.some(p => p.key == item.key),
                    }" :href="item.href">{{item.title}}
                </summary>
                <ul>
                    <li :class="{
                        ['indent-level-' + (item.level+1)]: true,
                        'current-li' : currentPage.some(p=>
                        p.key == item.key) && !currentPage.some(p => p.level > item.level),
                        }" >
                        <a class="section-link" :class="{
                           ['indent-level-' + (item.level+1)]: true,
                           'current-section' : currentPage.some(p=>
                            p.key == item.key) && !currentPage.some(p => p.level > item.level),
                            }" :href="item.href"> Introduction
                        </a>
                    </li>
                    <toc-tree v-for="childItem in item.items" :item="childItem" :expanded-tocs="expandedTocs" :current-page="currentPage"></toc-tree>
                </ul>
                <hr class="divider" v-if="item.level === 0" />
            </details>
        </li>
        <li v-else :class="{
            ['indent-level-' + (item.level+1)]: true,
            'current-li' : currentPage.some(p=>
            p.key == item.key) && !currentPage.some(p => p.level > item.level),
            }" >
            <a class="section-link" :class="{
               ['indent-level-' + (item.level)]: true,
               'current-section' : currentPage.some(p=>
                p.key == item.key),
                }" :href="item.href"> {{item.title}}
            </a>
        </li>
    </template>
    <script src="~/js/site.js" type="module" asp-append-version="true"></script>
</body>
</html>
